{"version":3,"sources":["../src/parser.js"],"names":[],"mappings":"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","file":"parser.js","sourcesContent":["// LICENSE : MIT\n\"use strict\";\nvar fs = require(\"fs\");\nvar path = require('path');\nvar language_map = require('language-map');\nvar re = /\\[([^\\]]*?)\\]\\(([^\\)]*?)\\)/gm;\nexport function containIncludeLabel(label) {\n    var reg = /^(include|import)$/;\n    var commands = label.split(/(:|[,\\s])/);\n    return commands.some(command => {\n        return reg.test(command.trim());\n    })\n}\n\n/*\nformat: [import:<start-lineNumber>-<end-lineNumber>](path/to/file)\nlineNumber start with 1.\n\nPatterns:\n\nAll: [import, hello-world.js](../src/hello-world.js)\n1-2: [import:1-2, hello-world.js](../src/hello-world.js)\n2-3: [import:2-3, hello-world.js](../src/hello-world.js)\n2>=: [import:2-, hello-world.js](../src/hello-world.js)\n<=3: [import:-3, hello-world.js](../src/hello-world.js)\n*/\nexport function getSliceRange(label) {\n    var reg = /^(?:include|import):?(\\d*)-?(\\d*)[,\\s]?.*$/;\n    var res = reg.exec(label);\n\n    // return ['', ''] if not matched.\n    return res ? res.slice(1) : [];\n}\n\nexport function lookupLanguageByExtension(ext) {\n    let aceMode;\n    Object.keys(language_map).some(langKey => {\n        const extensions = language_map[langKey][\"extensions\"];\n        /* TODO: These lang has not extensions\n        Ant Build System\n        Isabelle ROOT\n        Maven POMAnt Build System\n         */\n        if (!extensions) {\n            return false;\n        }\n        return extensions.some(extension => {\n            if (ext === extension) {\n                aceMode = language_map[langKey][\"aceMode\"];\n            }\n        });\n    });\n    return aceMode;\n}\n\nexport function getLang(filePath) {\n    var ext = path.extname(filePath);\n\n    return lookupLanguageByExtension(ext) || ext;\n}\nexport function embedCode(filePath, originalPath, start, end) {\n    var code = fs.readFileSync(filePath, \"utf-8\");\n    var slicedCode = sliceCode(code, start, end);\n    var fileName = path.basename(filePath);\n    var lang = getLang(filePath);\n    return `> <a name=\"${fileName}\" href=\"${originalPath}\">${fileName}</a>\n\n\\`\\`\\` ${lang}\n${slicedCode.trim()}\n\\`\\`\\``\n}\n\nfunction sliceCode(code, start, end) {\n    if (start === '' && end === '') {\n        return code;\n    }\n\n    var splitted = code.split('\\n');\n    if (start === '') {\n        start = 1;\n    }\n    if (end === '') {\n        end = splitted.length;\n    }\n    return splitted.slice(start - 1, end).join('\\n');\n}\n\nexport function parse(content, baseDir) {\n    var results = [];\n    var res;\n    while (res = re.exec(content)) {\n        var [all, label, filePath] = res;\n        if (containIncludeLabel(label)) {\n            var [start, end] = getSliceRange(label)\n            results.push({\n                target: all,\n                replaced: embedCode(path.resolve(baseDir, filePath), filePath, start, end)\n            });\n        }\n    }\n    return results;\n}\n"]}