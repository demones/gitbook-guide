// LICENSE : MIT
"use strict";
Object.defineProperty(exports, "__esModule", {
    value: true
});

var _slicedToArray = (function () { function sliceIterator(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"]) _i["return"](); } finally { if (_d) throw _e; } } return _arr; } return function (arr, i) { if (Array.isArray(arr)) { return arr; } else if (Symbol.iterator in Object(arr)) { return sliceIterator(arr, i); } else { throw new TypeError("Invalid attempt to destructure non-iterable instance"); } }; })();

exports.containIncludeLabel = containIncludeLabel;
exports.getSliceRange = getSliceRange;
exports.lookupLanguageByExtension = lookupLanguageByExtension;
exports.getLang = getLang;
exports.embedCode = embedCode;
exports.parse = parse;
var fs = require("fs");
var path = require('path');
var language_map = require('language-map');
var re = /\[([^\]]*?)\]\(([^\)]*?)\)/gm;

function containIncludeLabel(label) {
    var reg = /^(include|import)$/;
    var commands = label.split(/(:|[,\s])/);
    return commands.some(function (command) {
        return reg.test(command.trim());
    });
}

/*
format: [import:<start-lineNumber>-<end-lineNumber>](path/to/file)
lineNumber start with 1.

Patterns:

All: [import, hello-world.js](../src/hello-world.js)
1-2: [import:1-2, hello-world.js](../src/hello-world.js)
2-3: [import:2-3, hello-world.js](../src/hello-world.js)
2>=: [import:2-, hello-world.js](../src/hello-world.js)
<=3: [import:-3, hello-world.js](../src/hello-world.js)
*/

function getSliceRange(label) {
    var reg = /^(?:include|import):?(\d*)-?(\d*)[,\s]?.*$/;
    var res = reg.exec(label);

    // return ['', ''] if not matched.
    return res ? res.slice(1) : [];
}

function lookupLanguageByExtension(ext) {
    var aceMode = undefined;
    Object.keys(language_map).some(function (langKey) {
        var extensions = language_map[langKey]["extensions"];
        /* TODO: These lang has not extensions
        Ant Build System
        Isabelle ROOT
        Maven POMAnt Build System
         */
        if (!extensions) {
            return false;
        }
        return extensions.some(function (extension) {
            if (ext === extension) {
                aceMode = language_map[langKey]["aceMode"];
            }
        });
    });
    return aceMode;
}

function getLang(filePath) {
    var ext = path.extname(filePath);

    return lookupLanguageByExtension(ext) || ext;
}

function embedCode(filePath, originalPath, start, end) {
    var code = fs.readFileSync(filePath, "utf-8");
    var slicedCode = sliceCode(code, start, end);
    var fileName = path.basename(filePath);
    var lang = getLang(filePath);
    return "> <a name=\"" + fileName + "\" href=\"" + originalPath + "\">" + fileName + "</a>\n\n``` " + lang + "\n" + slicedCode.trim() + "\n```";
}

function sliceCode(code, start, end) {
    if (start === '' && end === '') {
        return code;
    }

    var splitted = code.split('\n');
    if (start === '') {
        start = 1;
    }
    if (end === '') {
        end = splitted.length;
    }
    return splitted.slice(start - 1, end).join('\n');
}

function parse(content, baseDir) {
    var results = [];
    var res;
    while (res = re.exec(content)) {
        var _res = res;

        var _res2 = _slicedToArray(_res, 3);

        var all = _res2[0];
        var label = _res2[1];
        var filePath = _res2[2];

        if (containIncludeLabel(label)) {
            var _getSliceRange = getSliceRange(label);

            var _getSliceRange2 = _slicedToArray(_getSliceRange, 2);

            var start = _getSliceRange2[0];
            var end = _getSliceRange2[1];

            results.push({
                target: all,
                replaced: embedCode(path.resolve(baseDir, filePath), filePath, start, end)
            });
        }
    }
    return results;
}
//# sourceMappingURL=parser.js.map